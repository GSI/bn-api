{
	"info": {
		"_postman_id": "26ceb4c8-b500-4704-ba61-9174552d8c24",
		"name": "bigneon-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Status",
			"item": [
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c75bf77-b444-492f-87e6-0338e97b372b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Origin",
								"value": "http://localhost:3000",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/status",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Setup",
			"item": [
				{
					"name": "Admin - Get Auth Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "994fad7c-ed5c-4512-9db4-e64e1eb3f879",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"token\", json.access_token);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"superuser@test.com\", \"password\":\"password\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/auth/token",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Current Me",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c75bf77-b444-492f-87e6-0338e97b372b",
								"type": "text/javascript",
								"exec": [
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"admin_id\", json.user.id)"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Origin",
								"value": "http://localhost:3000",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/users/me",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Creates Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.environment.set(\"last_org_id\", JSON.parse(responseBody).id);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Jazzy_{{$timestamp}}\",\n\"owner_user_id\": \"{{admin_id}}\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/organizations",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Invite to Org - via email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_invite_token\", r.security_token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9b7abe0a-aec0-4e0c-8625-8add39b08dff",
								"exec": [
									"pm.environment.set(\"last_org_member_email\", \"orgmem\" + Math.floor(Math.random() * 10000) + \"@test.com\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"user_email\": \"{{last_org_member_email}}\",\n \"role\" : \"OrgMember\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/organizations/{{last_org_id}}/invites",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"organizations",
								"{{last_org_id}}",
								"invites"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - Accept Invite - Not logged in - 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
								"exec": [
									"pm.test(\"should be 401\", function() {",
									"    pm.response.to.have.status(401);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c5f63f4b-2542-4707-b9c1-4b52598b640a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/invitations?security_token={{last_invite_token}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"invitations"
							],
							"query": [
								{
									"key": "security_token",
									"value": "{{last_invite_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - register and login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"pm.test(\"should have token response\", function() {",
									"\tlet json = JSON.parse(responseBody);",
									"\tpm.expect(json).to.have.property(\"access_token\");",
									"\tpm.expect(json).to.have.property(\"refresh_token\");",
									"});",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"org_member_token\", json.access_token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
								"exec": [
									"",
									"pm.environment.set(\"last_email\", \"mike\" + (new Date()).getTime() + \"@tari.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\":\"Mike\",\n\t\"last_name\":\"Surname\",\n\t\"email\":\"{{last_org_member_email}}\",\n\t\"phone\":\"555\",\n\t\"password\": \"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/users",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember - Accept Invite - Logged In - OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c5f63f4b-2542-4707-b9c1-4b52598b640a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/invitations?security_token={{last_invite_token}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"invitations"
							],
							"query": [
								{
									"key": "security_token",
									"value": "{{last_invite_token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "OrgMember -List Orgs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"pm.test(\"org should be present\", function() {",
									"    let found = false;",
									"    let org_id = pm.environment.get(\"last_org_id\");",
									"    for (let i=0;i<r.data.length;i++) {",
									"        if (r.data[i].id === org_id){",
									"            found = true;",
									"            break;",
									"        }",
									"    }",
									"    ",
									"    pm.expect(found).to.be.true;",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{org_member_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/organizations",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Creates Fee Schedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"pm.test(\"should be one result\", function(){",
									"    pm.expect(r.ranges.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"should have correct min_price_in_cents\", function(){",
									"    pm.expect(r.ranges[0].min_price_in_cents).to.equal(0);",
									"});",
									"",
									"pm.test(\"should have correct fee_in_cents\", function(){",
									"    pm.expect(r.ranges[0].fee_in_cents).to.equal(10);",
									"});",
									"",
									"pm.environment.set(\"last_fee_schedule_id\", JSON.parse(responseBody).id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Fee_schedule_{{$timestamp}}\",\n\"ranges\": [\n\t{\n\t\t\"min_price_in_cents\": 0,\n\t\t\"company_fee_in_cents\": 4,\n\t\t\"client_fee_in_cents\": 6\n\t}\n]\n}"
						},
						"url": {
							"raw": "http://{{server}}/organizations/{{last_org_id}}/fee_schedule",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"organizations",
								"{{last_org_id}}",
								"fee_schedule"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Update Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let r = JSON.parse(responseBody);",
									"pm.test(\"event fee should be 10\", function() {",
									"    pm.expect(r.event_fee_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"state should be CA\", function() {",
									"    pm.expect(r.state).to.equal(\"CA\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_fee_in_cents\": 10,\n\t\"state\" : \"CA\"\n\t\n}"
						},
						"url": {
							"raw": "http://{{server}}/organizations/{{last_org_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"organizations",
								"{{last_org_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Update Org - edit event fee",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let r = JSON.parse(responseBody);",
									"pm.test(\"event fee should be set\", function() {",
									"    pm.expect(r.event_fee_in_cents).to.equal(100);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"event_fee_in_cents\": 100\n}"
						},
						"url": {
							"raw": "http://{{server}}/organizations/{{last_org_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"organizations",
								"{{last_org_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Get Fee Schedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17cf3107-ed5d-457d-af42-595d5a3d6a4d",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"pm.test(\"should be one result\", function(){",
									"    pm.expect(r.ranges.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"should have correct min_price_in_cents\", function(){",
									"    pm.expect(r.ranges[0].min_price_in_cents).to.equal(0);",
									"});",
									"",
									"pm.test(\"should have correct fee_in_cents\", function(){",
									"    pm.expect(r.ranges[0].fee_in_cents).to.equal(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/organizations/{{last_org_id}}/fee_schedule",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"organizations",
								"{{last_org_id}}",
								"fee_schedule"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Create Artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.environment.set(\"last_artist_id\", JSON.parse(responseBody).id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"Artist {{$timestamp}}\",\n\t\"bio\": \"Artist bio\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/artists",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"artists"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Search Artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"Artist result should match\",function() {",
									"    pm.expect(JSON.parse(responseBody).data[0].id).to.eq(pm.environment.get(\"last_artist_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/artists/search?q=Artist&spotify=1",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"artists",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "Artist"
								},
								{
									"key": "spotify",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Search Artist Spotify Result",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"//If data is blank, no spotify key was provided",
									"",
									"",
									"pm.test(\"Spotify result should contain spotify_id or data should be blank\",function() {",
									"    pm.environment.set(\"last_spotify_artist_id\", \"\");",
									"    let data = JSON.parse(responseBody).data;",
									"    if(data.length === 0) {",
									"        postman.setNextRequest(\"Admin - Create Venue\");",
									"    } else {",
									"        data.forEach(item => {",
									"            pm.expect(item.spotify_id).to.not.be.a(\"null\");",
									"            pm.environment.set(\"last_spotify_artist_id\", \"5HFkc3t0HYETL4JeEbDB1v\");",
									"        })    ",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/artists/search?q=Powerwolf&spotify=1",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"artists",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "Powerwolf"
								},
								{
									"key": "spotify",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Create From Spotify",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
								"exec": [
									"if (pm.environment.get(\"last_spotify_artist_id\") !== \"\") {",
									"    pm.test(\"should be 201\", function() {",
									"        pm.response.to.have.status(201);",
									"    })    ",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8007340d-4d23-4637-86eb-dfd560cf5063",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"spotify_id\": \"{{last_spotify_artist_id}}\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/artists",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"artists"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Create Venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.environment.set(\"last_venue_id\", JSON.parse(responseBody).id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"Test venue_{{$timestamp}}\",\n\t\"address\": \"1 street street\",\n\t\"city\": \"City\",\n\t\"country\": \"Country\",\n\t\"organization_id\": \"{{last_org_id}}\",\n\t\"phone\": \"5555555555\",\n\t\"google_place_id\": null,\n\t\"state\": \"California\",\n\t\"postal_code\": \"23233\"\n\t\n}"
						},
						"url": {
							"raw": "http://{{server}}/venues",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"venues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - List Venues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df0ee4f1-a80b-4f9d-8404-ed8558bbb456",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									" let r = JSON.parse(responseBody);",
									" ",
									"pm.test(\"created venue should be present\", function() {",
									"    let found = false;",
									"    let last_venue_id = pm.environment.get(\"last_venue_id\");",
									"    for (var i=0;i < r.data.length; i++){",
									"        if (r.data[i].id === last_venue_id) {",
									"            found=true;",
									"            break;",
									"        }",
									"",
									"    }",
									"    pm.expect(found).to.be.true;",
									"  ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/venues",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"venues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin  - Create Event That is External",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91fe0a26-e6a0-437a-a7e7-834185ecf193",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.environment.set(\"external_event_id\", JSON.parse(responseBody).id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"It's my party\",\n    \"organization_id\": \"{{last_org_id}}\",\n    \"venue_id\": \"{{last_venue_id}}\",\n    \"event_start\": \"2059-11-13T12:00:00\",\n    \"is_external\": true,\n    \"external_url\": \"https://www.eventbrite.com/e/why-cloud-why-xero-why-now-johannesburg-limited-seats-tickets-52952818305?aff=ebdshpmoodssection\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/events",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin  - Update External Event To Be Sold Out",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91fe0a26-e6a0-437a-a7e7-834185ecf193",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"pm.test(\"should have correct fee_in_cents\", function(){",
									"    pm.expect(r.override_status).to.equal(\"SoldOut\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"It's my party\",\n    \"organization_id\": \"{{last_org_id}}\",\n    \"event_start\": \"2059-11-13T12:00:00\",\n    \"override_status\": \"SoldOut\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{external_event_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{external_event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin  - Create Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91fe0a26-e6a0-437a-a7e7-834185ecf193",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.environment.set(\"last_event_id\", JSON.parse(responseBody).id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"It's my party\",\n    \"organization_id\": \"{{last_org_id}}\",\n    \"venue_id\": \"{{last_venue_id}}\",\n    \"event_start\": \"2020-11-13T12:00:00\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/events",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin  - Update Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f54eb13-607a-4651-a581-3ce380c3fcbf",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_event_id\", JSON.parse(responseBody).id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fee_in_cents\": 100,\n    \"age_limit\": 18\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin  - Update Venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c91d2787-44e0-489c-9b8c-69a7f118f457",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"pm.test(\"fields should be updated\", function() {",
									"    pm.expect(r.address).to.equal(\"address\");",
									"    pm.expect(r.city).to.equal(\"city\");",
									"",
									"    pm.expect(r.country).to.equal(\"the best country\");",
									"",
									"    pm.expect(r.postal_code).to.equal(\"2222\");",
									"    ",
									"    pm.expect(r.state).to.equal(\"CA\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\": \"address\",\n    \"city\":\"city\",\n    \"country\" : \"the best country\",\n    \"postal_code\" : \"2222\",\n    \"state\":\"CA\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/venues/{{last_venue_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"venues",
								"{{last_venue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin  - Publish Event (succeeds)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5e62cfa-62d4-44b3-94cb-e6946bb423c2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/publish",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"publish"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - search for events - Upcoming",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70811e5f-20d4-4a04-9285-d9f4b847f5cf",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"pm.test(\"should be one result\", function(){",
									"    pm.expect(r.data.length).to.equal(2);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/organizations/{{last_org_id}}/events?past_or_upcoming=upcoming",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"organizations",
								"{{last_org_id}}",
								"events"
							],
							"query": [
								{
									"key": "past_or_upcoming",
									"value": "upcoming"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - search for events - Past - No results",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70811e5f-20d4-4a04-9285-d9f4b847f5cf",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"pm.test(\"should be empty\", function(){",
									"    pm.expect(r.data.length).to.equal(0);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/organizations/{{last_org_id}}/events?past_or_upcoming=past",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"organizations",
								"{{last_org_id}}",
								"events"
							],
							"query": [
								{
									"key": "past_or_upcoming",
									"value": "past"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin  - Create Event in Past",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91fe0a26-e6a0-437a-a7e7-834185ecf193",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"It's my party\",\n    \"organization_id\": \"{{last_org_id}}\",\n    \"venue_id\": \"{{last_venue_id}}\",\n    \"event_start\": \"2018-11-13T12:00:00\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/events",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - search for events - Past",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70811e5f-20d4-4a04-9285-d9f4b847f5cf",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"pm.test(\"should be one result\", function(){",
									"    pm.expect(r.data.length).to.equal(1);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/organizations/{{last_org_id}}/events?past_or_upcoming=Past",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"organizations",
								"{{last_org_id}}",
								"events"
							],
							"query": [
								{
									"key": "past_or_upcoming",
									"value": "Past"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - create tickets - VIP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d202bc-9666-4e6c-b8b0-076df724af03",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.environment.set(\"last_ticket_type_id\", JSON.parse(responseBody).id);",
									"",
									"pm.environment.set(\"vip_ticket_type_id\", JSON.parse(responseBody).id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"VIP_{{$timestamp}}\",\n\t\"capacity\": 100,\n\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\"end_date\": \"9999-01-10T02:22:00\",\n\t\"limit_per_person\": 0,\n\t\"ticket_pricing\":[{\n\t\t\t\"name\": \"Test_{{$timestamp}}\",\n\t\"price_in_cents\": 3000,\n\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\"end_date\": \"2022-02-01T02:22:00\"\n\n\t}, {\n\t\t\t\"name\": \"Test_{{$timestamp}}_late_bird\",\n\t\"price_in_cents\": 4000,\n\t\"start_date\":\"2022-02-01T02:22:00\",\n\t\"end_date\": \"9999-01-10T02:22:00\"\n\n\t}\n\t]\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/ticket_types",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"ticket_types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - create tickets - VIP - Box office Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d202bc-9666-4e6c-b8b0-076df724af03",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.environment.set(\"last_ticket_type_id\", JSON.parse(responseBody).id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"VIP_{{$timestamp}}_With_Box_Office\",\n\t\"capacity\": 100,\n\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\"end_date\": \"9999-01-10T02:22:00\",\n\t\"limit_per_person\": 0,\n\t\"ticket_pricing\":[{\n\t\t\t\"name\": \"Test_{{$timestamp}}\",\n\t\"price_in_cents\": 3000,\n\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\"end_date\": \"2022-02-01T02:22:00\"\n\n\t}, {\n\t\t\t\"name\": \"Test_{{$timestamp}}_late_bird\",\n\t\"price_in_cents\": 4000,\n\t\"start_date\":\"2022-02-01T02:22:00\",\n\t\"end_date\": \"9999-01-10T02:22:00\"\n\n\t},\n\t{\n\t\t\t\"name\": \"Test_{{$timestamp}}_box_office_only\",\n\t\"price_in_cents\": 8000,\n\t\"is_box_office_only\": true,\n\t\"start_date\":\"2022-02-01T02:22:00\",\n\t\"end_date\": \"9999-01-10T02:22:00\"\n\n\t}\n\t]\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/ticket_types",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"ticket_types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - create tickets - fails due to validation errors",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d202bc-9666-4e6c-b8b0-076df724af03",
								"exec": [
									"pm.test(\"should be 422\", function() {",
									"    pm.response.to.have.status(422);",
									"})",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"pm.test(\"should have validation error\", function(){",
									"    pm.expect(r.error).to.equal(\"Validation error\");",
									"    ",
									"    pm.expect(r.fields[\"ticket_pricing.end_date\"].length).to.equal(1);",
									"    pm.expect(r.fields[\"ticket_pricing.end_date\"][0].code).to.equal(\"ticket_pricing_overlapping_ticket_type_end_date\");",
									"    pm.expect(r.fields[\"ticket_pricing.end_date\"][0].message).to.equal(\"Ticket pricing dates overlap ticket type end date\");",
									"    pm.expect(r.fields[\"ticket_pricing.end_date\"][0].params.end_date).to.equal(\"2022-02-01T02:22:00\");",
									"    ",
									"    pm.expect(r.fields[\"ticket_pricing.start_date\"].length).to.equal(1);",
									"    pm.expect(r.fields[\"ticket_pricing.start_date\"][0].code).to.equal(\"ticket_pricing_overlapping_ticket_type_start_date\");",
									"    pm.expect(r.fields[\"ticket_pricing.start_date\"][0].message).to.equal(\"Ticket pricing dates overlap ticket type start date\");",
									"    pm.expect(r.fields[\"ticket_pricing.start_date\"][0].params.start_date).to.equal(\"1981-02-01T02:22:00\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"General Admission_{{$timestamp}}\",\n\t\"capacity\": 1000,\n\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\"end_date\": \"2021-01-10T02:22:00\",\n\t\"limit_per_person\": 50,\n\t\"ticket_pricing\":[\n\t\t{\n\t\t\t\"name\": \"Standard\",\n\t\t\t\"price_in_cents\": 3000,\n\t\t\t\"start_date\":\"1981-02-01T02:22:00\",\n\t\t\t\"end_date\": \"2022-02-01T02:22:00\"\n\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/ticket_types",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"ticket_types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - create tickets - GA",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d202bc-9666-4e6c-b8b0-076df724af03",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.environment.set(\"last_ticket_type_id\", JSON.parse(responseBody).id);",
									"",
									"pm.environment.set(\"ga_ticket_type_id\", JSON.parse(responseBody).id);",
									"pm.environment.set(\"ticket_limit_above_max\", 51);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"General Admission_{{$timestamp}}\",\n\t\"capacity\": 1000,\n\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\"end_date\": \"9999-01-10T02:22:00\",\n\t\"limit_per_person\": 50,\n\t\"ticket_pricing\":[{\n\t\t\t\"name\": \"Standard\",\n\t\"price_in_cents\": 3000,\n\t\"start_date\":\"1982-02-01T02:22:00\",\n\t\"end_date\": \"2022-02-01T02:22:00\"\n\n\t}\n\t]\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/ticket_types",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"ticket_types"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Codes",
			"item": [
				{
					"name": "Admin - create discount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.environment.set(\"last_code_id\", JSON.parse(responseBody).id);",
									"",
									"let json = JSON.parse(responseBody);",
									"pm.test(\"discount should have correct information\", function(){",
									"    pm.expect(json.name).to.equal(\"Discount Tickets\");",
									"    pm.expect(json.max_uses).to.equal(10);",
									"    pm.expect(json.code_type).to.equal(\"Discount\");",
									"    pm.expect(json.discount_in_cents).to.equal(100);",
									"    pm.expect(json.start_date).to.equal(\"2018-01-01T12:00:00\");",
									"    pm.expect(json.end_date).to.equal(\"2019-01-01T12:00:00\");",
									"    pm.expect(json.max_tickets_per_user).to.equal(10);",
									"    let ticket_type_id = pm.variables.get(\"last_ticket_type_id\");",
									"    pm.expect(json.ticket_type_ids[0]).to.equal(ticket_type_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"Discount Tickets\",\n\t\"code_type\" : \"Discount\",\n\t\"redemption_code\" : \"RedeemDiscountCode{{$timestamp}}\",\n\t\"max_uses\" : 10,\n\t\"discount_in_cents\" : 100,\n\t\"start_date\": \"2018-01-01T12:00:00\",\n\t\"end_date\": \"2019-01-01T12:00:00\",\n\t\"max_tickets_per_user\" : 10,\n\t\"ticket_type_ids\": [\"{{last_ticket_type_id}}\"]\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/codes",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - update discount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let json = JSON.parse(responseBody);",
									"pm.test(\"discount should have correct information\", function(){",
									"    pm.expect(json.name).to.equal(\"New Discount Name\");",
									"    pm.expect(json.max_uses).to.equal(10);",
									"    pm.expect(json.discount_in_cents).to.equal(100);",
									"    pm.expect(json.start_date).to.equal(\"2018-01-01T12:00:00\");",
									"    pm.expect(json.end_date).to.equal(\"2019-01-01T12:00:00\");",
									"    pm.expect(json.max_tickets_per_user).to.equal(10);",
									"    let ticket_type_id = pm.variables.get(\"last_ticket_type_id\");",
									"    pm.expect(json.ticket_type_ids[0]).to.equal(ticket_type_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\t\t\"name\" : \"New Discount Name\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/codes/{{last_code_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"codes",
								"{{last_code_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - list discounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"discount should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(1);",
									"    pm.expect(json.data[0].name).to.equal(\"New Discount Name\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/codes?query=discount",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"codes"
							],
							"query": [
								{
									"key": "query",
									"value": "discount"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - list all codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"discount should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(1);",
									"    pm.expect(json.data[0].name).to.equal(\"New Discount Name\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/codes",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - read discount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"discount should have correct information\", function(){",
									"    pm.expect(json.name).to.equal(\"New Discount Name\");",
									"    pm.expect(json.max_uses).to.equal(10);",
									"    pm.expect(json.discount_in_cents).to.equal(100);",
									"    pm.expect(json.start_date).to.equal(\"2018-01-01T12:00:00\");",
									"    pm.expect(json.end_date).to.equal(\"2019-01-01T12:00:00\");",
									"    pm.expect(json.max_tickets_per_user).to.equal(10);",
									"    let ticket_type_id = pm.variables.get(\"last_ticket_type_id\");",
									"    pm.expect(json.ticket_type_ids[0]).to.equal(ticket_type_id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/codes/{{last_code_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"codes",
								"{{last_code_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - create access code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let json = JSON.parse(responseBody);",
									"pm.test(\"discount should have correct information\", function(){",
									"    pm.expect(json.name).to.equal(\"Access Tickets\");",
									"    pm.expect(json.max_uses).to.equal(10);",
									"    pm.expect(json.code_type).to.equal(\"Access\");",
									"    pm.expect(json.discount_in_cents).to.equal(null);",
									"    pm.expect(json.start_date).to.equal(\"2018-01-01T12:00:00\");",
									"    pm.expect(json.end_date).to.equal(\"2019-01-01T12:00:00\");",
									"    pm.expect(json.max_tickets_per_user).to.equal(10);",
									"    let ticket_type_id = pm.variables.get(\"last_ticket_type_id\");",
									"    pm.expect(json.ticket_type_ids[0]).to.equal(ticket_type_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"Access Tickets\",\n\t\"code_type\" : \"Access\",\n\t\"redemption_code\" : \"AccessDiscountCode{{$timestamp}}\",\n\t\"max_uses\" : 10,\n\t\"discount_in_cents\" : null,\n\t\"start_date\": \"2018-01-01T12:00:00\",\n\t\"end_date\": \"2019-01-01T12:00:00\",\n\t\"max_tickets_per_user\" : 10,\n\t\"ticket_type_ids\": [\"{{last_ticket_type_id}}\"]\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/codes",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - list all discount codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"discount should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(1);",
									"    pm.expect(json.data[0].name).to.equal(\"New Discount Name\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/codes?type=Discount",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"codes"
							],
							"query": [
								{
									"key": "type",
									"value": "Discount"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - list all access codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"access should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(1);",
									"    pm.expect(json.data[0].name).to.equal(\"Access Tickets\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/codes?type=Access",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"codes"
							],
							"query": [
								{
									"key": "type",
									"value": "Access"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - destroy discount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/codes/{{last_code_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"codes",
								"{{last_code_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - list discounts after destroy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"codes should only return 1 item\", function(){",
									"    pm.expect(json.data.length).to.equal(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/codes",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"codes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Holds",
			"item": [
				{
					"name": "Admin - create hold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"",
									"pm.environment.set(\"last_hold_id\", JSON.parse(responseBody).id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"Musician Tickets{{$timestamp}}\",\n\t\"hold_type\":\"Discount\",\n\t\"redemption_code\" : \"Yeaaaah{{$timestamp}}\",\n\t\"discount_in_cents\" : 100,\n\t\"end_at\": \"2019-01-01T12:00:00\",\n\t\"max_per_order\" : 10,\n\t\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\t\"quantity\" : 30\n\t\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/holds",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"holds"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - split hold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"",
									"",
									"pm.environment.set(\"last_split_hold_id\", JSON.parse(responseBody).id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"Musician Tickets2{{$timestamp}}\",\n\t\"hold_type\":\"Discount\",\n\t\"redemption_code\" : \"Yeaaaah2{{$timestamp}}\",\n\t\"discount_in_cents\" : 100,\n\t\"end_at\": \"2019-01-01T12:00:00\",\n\t\"max_per_order\" : 10,\n\t\"quantity\" : 30\n}"
						},
						"url": {
							"raw": "http://{{server}}/holds/{{last_hold_id}}/split",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"holds",
								"{{last_hold_id}}",
								"split"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - delete hold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/holds/{{last_split_hold_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"holds",
								"{{last_split_hold_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - add tickets to hold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"quantity\" : 10\n}"
						},
						"url": {
							"raw": "http://{{server}}/holds/{{last_hold_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"holds",
								"{{last_hold_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - remove tickets remove hold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c92a6ff-f31d-4dd9-8839-03da430de734",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"quantity\" : 5\n}"
						},
						"url": {
							"raw": "http://{{server}}/holds/{{last_hold_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"holds",
								"{{last_hold_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - list holds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/holds",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"holds"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - read hold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/holds/{{last_hold_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"holds",
								"{{last_hold_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comp Holds",
			"item": [
				{
					"name": "Admin - create comp hold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"",
									"pm.environment.set(\"last_hold_id\", JSON.parse(responseBody).id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"Event Comp Tickets{{$timestamp}}\",\n\t\"hold_type\":\"Comp\",\n\t\"redemption_code\" : \"Comps{{$timestamp}}\",\n\t\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\t\"quantity\" : 30\n\t\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/holds",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"holds"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - add comps to comp hold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"comp should have correct information\", function(){",
									"    pm.expect(json.name).to.equal(\"Michael Davidson\");",
									"    pm.expect(json.phone).to.equal(\"111-111-1111\");",
									"    pm.expect(json.email).to.equal(\"michael-davidson@tari.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ce8bf578-46bd-4ebb-89e0-3e1cd92034b7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Michael Davidson\",\n\t\"email\": \"michael-davidson@tari.com\",\n\t\"phone\":\"111-111-1111\",\n\t\"quantity\": 15,\n\t\"redemption_code\": \"MIKETIX{{$timestamp}}\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/holds/{{last_hold_id}}/comps",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"holds",
								"{{last_hold_id}}",
								"comps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - get comps from comp hold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"comp should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"comp should have correct information\", function(){",
									"    pm.expect(json.data[0].name).to.equal(\"Michael Davidson\");",
									"    pm.expect(json.data[0].phone).to.equal(\"111-111-1111\");",
									"    pm.expect(json.data[0].email).to.equal(\"michael-davidson@tari.com\");",
									"    pm.expect(json.data[0].quantity).to.equal(15);",
									"});",
									"",
									"pm.environment.set(\"last_comp_id\", json.data[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/holds/{{last_hold_id}}/comps",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"holds",
								"{{last_hold_id}}",
								"comps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - get comp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"comp should have correct information\", function(){",
									"    pm.expect(json.name).to.equal(\"Michael Davidson\");",
									"    pm.expect(json.phone).to.equal(\"111-111-1111\");",
									"    pm.expect(json.email).to.equal(\"michael-davidson@tari.com\");",
									"    pm.expect(json.quantity).to.equal(15);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/comps/{{last_comp_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"comps",
								"{{last_comp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - update comp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"comp should have correct information\", function(){",
									"    pm.expect(json.name).to.equal(\"Michael Robinson\");",
									"    pm.expect(json.phone).to.equal(\"222-222-2222\");",
									"    pm.expect(json.email).to.equal(\"michael-robinson@tari.com\");",
									"    pm.expect(json.quantity).to.equal(5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Michael Robinson\",\n\t\"email\": \"michael-robinson@tari.com\",\n\t\"phone\":\"222-222-2222\",\n\t\"quantity\": 5\n}"
						},
						"url": {
							"raw": "http://{{server}}/comps/{{last_comp_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"comps",
								"{{last_comp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - get comp after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"comp should have correct information\", function(){",
									"    pm.expect(json.name).to.equal(\"Michael Robinson\");",
									"    pm.expect(json.phone).to.equal(\"222-222-2222\");",
									"    pm.expect(json.email).to.equal(\"michael-robinson@tari.com\");",
									"    pm.expect(json.quantity).to.equal(5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/comps/{{last_comp_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"comps",
								"{{last_comp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - destroy comp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/comps/{{last_comp_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"comps",
								"{{last_comp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - get comp after destroy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(404);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/comps/{{last_comp_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"comps",
								"{{last_comp_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - get comps from comp hold after destroy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6deee955-92fc-402a-8ec3-d139822b7776",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"comp should not be present\", function(){",
									"    pm.expect(json.data.length).to.equal(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/holds/{{last_hold_id}}/comps",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"holds",
								"{{last_hold_id}}",
								"comps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - create comp hold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0936a8c3-977f-412b-95de-f9ab1abd5203",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_hold_id\", r.id);",
									"",
									"pm.environment.set(\"last_redemption_code\", r.redemption_code);",
									"",
									"pm.test(\"quantity should be correct\", function() {",
									"    pm.expect(r.quantity).to.equal(30);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"Event Comp Tickets{{$timestamp}}\",\n\t\"hold_type\":\"Comp\",\n\t\"redemption_code\" : \"Comps2{{$timestamp}}\",\n\t\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\t\"quantity\" : 30\n\t\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/holds",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"holds"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - register and login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"pm.test(\"should have token response\", function() {",
									"\tlet json = JSON.parse(responseBody);",
									"\tpm.expect(json).to.have.property(\"access_token\");",
									"\tpm.expect(json).to.have.property(\"refresh_token\");",
									"});",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"user_token\", json.access_token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
								"exec": [
									"",
									"pm.environment.set(\"last_email\", \"mike\" + (new Date()).getTime() + \"@tari.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\":\"Mike\",\n\t\"last_name\":\"Surname\",\n\t\"email\":\"{{last_email}}\",\n\t\"phone\":\"555\",\n\t\"password\": \"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/users",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add to cart - redemption code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(30);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(0);",
									"    ",
									"    pm.expect(json.items[0].redemption_code).to.equal(pm.environment.get(\"last_redemption_code\"));",
									"   ",
									"});",
									"",
									"pm.test(\"should have no per item or event fees\", function(){",
									"    pm.expect(json.items.length).to.equal(1);",
									"  ",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(0);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"redemption_code\": \"{{last_redemption_code}}\",\n\"quantity\":30\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add to cart - redemption code - too many fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 422\", function() {",
									"    pm.response.to.have.status(422);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									"",
									"pm.test(\"error should be present\", function(){",
									"    pm.expect(json.fields.quantity[0].code).to.equal(\"Could not reserve the correct amount of tickets\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"redemption_code\": \"{{last_redemption_code}}\",\n\"quantity\":31\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Buy Tickets",
			"item": [
				{
					"name": "User - search for event - Past",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f40a2996-aa1a-4be7-925f-1e55828eb494",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events?past_or_upcoming=past",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "past_or_upcoming",
									"value": "past"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User - search for event - Upcoming",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f40a2996-aa1a-4be7-925f-1e55828eb494",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events?past_or_upcoming=upcoming",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "past_or_upcoming",
									"value": "upcoming"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User - view event tickets",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f40a2996-aa1a-4be7-925f-1e55828eb494",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let r = JSON.parse(responseBody);",
									"",
									"pm.test(\"should return event fee_in_cents\", function(){",
									"    pm.expect(r.fee_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"should have correct ticket_types ticket_pricing fee_in_cents\", function(){",
									"    pm.expect(r.ticket_types[0].ticket_pricing.fee_in_cents).to.equal(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - register without optional fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
								"exec": [
									"",
									"pm.environment.set(\"last_email\", \"mike\" + (new Date()).getTime() + \"@tari.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"noname{{$timestamp}}@localhost\",\n\t\"password\": \"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/users/register",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.environment.set(\"last_email\", \"mike\" + (new Date()).getTime() + \"@tari.com\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\":\"Mike\",\n\t\"last_name\":\"Surname\",\n\t\"email\":\"{{last_email}}\",\n\t\"phone\":\"555\",\n\t\"password\": \"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/users/register",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - register and login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									"pm.test(\"should have token response\", function() {",
									"\tlet json = JSON.parse(responseBody);",
									"\tpm.expect(json).to.have.property(\"access_token\");",
									"\tpm.expect(json).to.have.property(\"refresh_token\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
								"exec": [
									"",
									"pm.environment.set(\"last_email\", \"mike\" + (new Date()).getTime() + \"@tari.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"first_name\":\"Mike\",\n\t\"last_name\":\"Surname\",\n\t\"email\":\"{{last_email}}\",\n\t\"phone\":\"555\",\n\t\"password\": \"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/users",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3677e01-0ed8-4cd2-9673-0e6dacae9a53",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"user_token\", json.access_token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"{{last_email}}\", \"password\":\"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/auth/token",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items.length).to.equal(5);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(27190);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{ga_ticket_type_id}}\",\n\"quantity\":2\n}, {\n\"ticket_type_id\": \"{{vip_ticket_type_id}}\",\n\"quantity\":7\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - clear cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should no longer be present\", function(){",
									"    pm.expect(json.items.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(0);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add to cart GA and VIP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items.length).to.equal(5);",
									"    ",
									"    // these are tested properly in later calls",
									"   ",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(27190);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{ga_ticket_type_id}}\",\n\"quantity\":2\n}, {\n\"ticket_type_id\": \"{{vip_ticket_type_id}}\",\n\"quantity\":7\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - replace cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(2);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"    ",
									"    pm.environment.set(\"last_ticket_pricing_id\", json.items[0].ticket_pricing_id);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"     pm.expect(json.items[1].quantity).to.equal(2);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(6120);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{vip_ticket_type_id}}\",\n\"quantity\":2\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - replace cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(20);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"    ",
									"    pm.expect(json.items[0].ticket_type_id).to.equal(pm.environment.get(\"ga_ticket_type_id\"));",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"     pm.expect(json.items[1].quantity).to.equal(20);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(60300);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{ga_ticket_type_id}}\",\n\"quantity\":20\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - clear cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should not be present\", function(){",
									"    pm.expect(json.items.length).to.equal(0);",
									"    ",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(0);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": []\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(2);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"    ",
									"    pm.environment.set(\"last_ticket_pricing_id\", json.items[0].ticket_pricing_id);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"     pm.expect(json.items[1].quantity).to.equal(2);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(6120);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\":2\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add more than limit to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 422\", function() {",
									"    pm.response.to.have.status(422);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\": {{ticket_limit_above_max}}\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - remove all from cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should not be present\", function(){",
									"    pm.expect(json.items.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(0);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\":0\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add some more to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(4);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"    ",
									"    pm.environment.set(\"last_ticket_pricing_id\", json.items[0].ticket_pricing_id);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[1].quantity).to.equal(4);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(12140);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\":4\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - view cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "069abb66-557c-4d17-855e-bfc510703605",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(4);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"    ",
									"    pm.environment.set(\"last_ticket_pricing_id\", json.items[0].ticket_pricing_id);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[0].quantity).to.equal(4);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(12140);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - remove from cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(1);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"",
									"    ",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[0].quantity).to.equal(1);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(3110);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\":1\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - view cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "069abb66-557c-4d17-855e-bfc510703605",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(1);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"",
									"    ",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[0].quantity).to.equal(1);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(3110);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Do STRIPE form post",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf1ae8f4-683d-4b15-8362-773405313887",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"pm.environment.set(\"last_credit_card_token\", json.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "origin",
								"value": "https://checkout.stripe.com"
							},
							{
								"key": "accept-encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "accept-language",
								"value": "en-GB"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"
							},
							{
								"key": "content-type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "referer",
								"value": "https://checkout.stripe.com/m/v3/index-f925604dd4aa6c77a2d874f2507bf975.html?distinct_id=84c5f1db-c2d7-f3f1-1c85-7eca6a669c36"
							},
							{
								"key": "authority",
								"value": "api.stripe.com"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "test%40test.com",
									"type": "text"
								},
								{
									"key": "validation_type",
									"value": "card",
									"type": "text"
								},
								{
									"key": "payment_user_agent",
									"value": "Stripe+Checkout+v3+checkout-manhattan+(stripe.js%2Fe64eb2a)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "referrer",
									"value": "https%3A%2F%2Fstripe.com%2Fdocs%2Fquickstart",
									"type": "text"
								},
								{
									"key": "card[number]",
									"value": "4242424242424242",
									"type": "text"
								},
								{
									"key": "card[exp_month]",
									"value": "12",
									"type": "text"
								},
								{
									"key": "card[exp_year]",
									"value": "19",
									"type": "text"
								},
								{
									"key": "card[cvc]",
									"value": "001",
									"type": "text"
								},
								{
									"key": "card[name]",
									"value": "test%40test.com",
									"type": "text"
								},
								{
									"key": "time_on_page",
									"value": "51111",
									"type": "text",
									"disabled": true
								},
								{
									"key": "guid",
									"value": "3018e293-d38a-400a-a476-c10c6c52bc25",
									"type": "text",
									"disabled": true
								},
								{
									"key": "muid",
									"value": "f43260bf-02c5-4e56-a691-8b1083a9f910",
									"type": "text",
									"disabled": true
								},
								{
									"key": "sid",
									"value": "157d6b7b-b4bd-4628-a78c-df66c576f2e5",
									"type": "text",
									"disabled": true
								},
								{
									"key": "key",
									"value": "pk_test_nJGSQo5LQ7i8h8OkEjYeCqVc",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://api.stripe.com/v1/tokens",
							"protocol": "https",
							"host": [
								"api",
								"stripe",
								"com"
							],
							"path": [
								"v1",
								"tokens"
							]
						},
						"description": "Generated from a curl request: \ncurl 'https://api.stripe.com/v1/tokens' -H 'origin: https://checkout.stripe.com' -H 'accept-encoding: gzip, deflate, br' -H 'accept-language: en-GB' -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36' -H 'content-type: application/x-www-form-urlencoded' -H 'accept: application/json' -H 'referer: https://checkout.stripe.com/m/v3/index-f925604dd4aa6c77a2d874f2507bf975.html?distinct_id=84c5f1db-c2d7-f3f1-1c85-7eca6a669c36' -H 'authority: api.stripe.com' --data 'email=test%40test.com&validation_type=card&payment_user_agent=Stripe+Checkout+v3+checkout-manhattan+(stripe.js%2Fe64eb2a)&referrer=https%3A%2F%2Fstripe.com%2Fdocs%2Fquickstart&card[number]=4242424242424242&card[exp_month]=12&card[exp_year]=19&card[cvc]=001&card[name]=test%40test.com&time_on_page=51111&guid=3018e293-d38a-400a-a476-c10c6c52bc25&muid=f43260bf-02c5-4e56-a691-8b1083a9f910&sid=157d6b7b-b4bd-4628-a78c-df66c576f2e5&key=pk_test_nJGSQo5LQ7i8h8OkEjYeCqVc' --compressed"
					},
					"response": []
				},
				{
					"name": "User - checkout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecf814e4-aad0-4e95-9a7c-7e0f6ff4f53b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"amount\": 12140,\n\t\"method\": {\n\t\t\"type\" : \"Card\",\n\t\t\"provider\": \"stripe\",\n\t\t\"token\" : \"{{last_credit_card_token}}\",\n\t\t\"save_payment_method\": false,\n\t\t\"set_default\": true\n\t}\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart/checkout",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart",
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - cart should be empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48bb30ba-f012-42c1-80c6-222f316c08b7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"should have no items\", function(){",
									"    pm.expect(json.items).to.be.undefined;",
									"   ",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - get tickets for event",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6231a347-7d0d-4e52-9df5-3e0dd47eb022",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"1 ticket should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/tickets",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"tickets"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Buy Tickets Saved Method",
			"item": [
				{
					"name": "User - add to cart new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[0].quantity).to.equal(2);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(6120);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\":2\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - view cart new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5631a4d6-d4ae-4d22-8919-d51cdf511d27",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[0].quantity).to.equal(2);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(6120);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Do STRIPE form post new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf1ae8f4-683d-4b15-8362-773405313887",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"pm.environment.set(\"last_credit_card_token\", json.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "origin",
								"value": "https://checkout.stripe.com"
							},
							{
								"key": "accept-encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "accept-language",
								"value": "en-GB"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"
							},
							{
								"key": "content-type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "referer",
								"value": "https://checkout.stripe.com/m/v3/index-f925604dd4aa6c77a2d874f2507bf975.html?distinct_id=84c5f1db-c2d7-f3f1-1c85-7eca6a669c36"
							},
							{
								"key": "authority",
								"value": "api.stripe.com"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "test%40test.com",
									"type": "text"
								},
								{
									"key": "validation_type",
									"value": "card",
									"type": "text"
								},
								{
									"key": "payment_user_agent",
									"value": "Stripe+Checkout+v3+checkout-manhattan+(stripe.js%2Fe64eb2a)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "referrer",
									"value": "https%3A%2F%2Fstripe.com%2Fdocs%2Fquickstart",
									"type": "text"
								},
								{
									"key": "card[number]",
									"value": "4242424242424242",
									"type": "text"
								},
								{
									"key": "card[exp_month]",
									"value": "12",
									"type": "text"
								},
								{
									"key": "card[exp_year]",
									"value": "19",
									"type": "text"
								},
								{
									"key": "card[cvc]",
									"value": "001",
									"type": "text"
								},
								{
									"key": "card[name]",
									"value": "test%40test.com",
									"type": "text"
								},
								{
									"key": "time_on_page",
									"value": "51111",
									"type": "text",
									"disabled": true
								},
								{
									"key": "guid",
									"value": "3018e293-d38a-400a-a476-c10c6c52bc25",
									"type": "text",
									"disabled": true
								},
								{
									"key": "muid",
									"value": "f43260bf-02c5-4e56-a691-8b1083a9f910",
									"type": "text",
									"disabled": true
								},
								{
									"key": "sid",
									"value": "157d6b7b-b4bd-4628-a78c-df66c576f2e5",
									"type": "text",
									"disabled": true
								},
								{
									"key": "key",
									"value": "pk_test_nJGSQo5LQ7i8h8OkEjYeCqVc",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://api.stripe.com/v1/tokens",
							"protocol": "https",
							"host": [
								"api",
								"stripe",
								"com"
							],
							"path": [
								"v1",
								"tokens"
							]
						},
						"description": "Generated from a curl request: \ncurl 'https://api.stripe.com/v1/tokens' -H 'origin: https://checkout.stripe.com' -H 'accept-encoding: gzip, deflate, br' -H 'accept-language: en-GB' -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36' -H 'content-type: application/x-www-form-urlencoded' -H 'accept: application/json' -H 'referer: https://checkout.stripe.com/m/v3/index-f925604dd4aa6c77a2d874f2507bf975.html?distinct_id=84c5f1db-c2d7-f3f1-1c85-7eca6a669c36' -H 'authority: api.stripe.com' --data 'email=test%40test.com&validation_type=card&payment_user_agent=Stripe+Checkout+v3+checkout-manhattan+(stripe.js%2Fe64eb2a)&referrer=https%3A%2F%2Fstripe.com%2Fdocs%2Fquickstart&card[number]=4242424242424242&card[exp_month]=12&card[exp_year]=19&card[cvc]=001&card[name]=test%40test.com&time_on_page=51111&guid=3018e293-d38a-400a-a476-c10c6c52bc25&muid=f43260bf-02c5-4e56-a691-8b1083a9f910&sid=157d6b7b-b4bd-4628-a78c-df66c576f2e5&key=pk_test_nJGSQo5LQ7i8h8OkEjYeCqVc' --compressed"
					},
					"response": []
				},
				{
					"name": "User - checkout new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecf814e4-aad0-4e95-9a7c-7e0f6ff4f53b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"amount\": 6120,\n\t\"method\": {\n\t\t\"type\" : \"Card\",\n\t\t\"provider\": \"stripe\",\n\t\t\"token\" : \"{{last_credit_card_token}}\",\n\t\t\"save_payment_method\": true,\n\t\t\"set_default\": true\n\t}\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart/checkout",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart",
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - check saved methods",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48bb30ba-f012-42c1-80c6-222f316c08b7",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"should have stripe saved\", function(){",
									"    pm.expect(json[0].name).to.be.equal(\"stripe\");",
									"   ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/payment_methods",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"payment_methods"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - cart should be empty new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48bb30ba-f012-42c1-80c6-222f316c08b7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"should have no items\", function(){",
									"    pm.expect(json.items).to.be.undefined;",
									"   ",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - get tickets for event new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6231a347-7d0d-4e52-9df5-3e0dd47eb022",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/tickets",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add to cart new order saved method testing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\":2\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - view cart new order saved payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5631a4d6-d4ae-4d22-8919-d51cdf511d27",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[0].quantity).to.equal(2);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(6120);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - checkout new order saved method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecf814e4-aad0-4e95-9a7c-7e0f6ff4f53b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"amount\": 6120,\n\t\"method\": {\n\t\t\"type\" : \"PaymentMethod\",\n\t\t\"provider\": \"stripe\"\n\t}\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart/checkout",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart",
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - cart should be empty saved method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48bb30ba-f012-42c1-80c6-222f316c08b7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"should have no items\", function(){",
									"    pm.expect(json.items).to.be.undefined;",
									"   ",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - get tickets for event saved method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6231a347-7d0d-4e52-9df5-3e0dd47eb022",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/tickets",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - add to cart new order default method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_cart_id\", json.cart_id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\":2\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - view cart new order default method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5631a4d6-d4ae-4d22-8919-d51cdf511d27",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"    pm.expect(json.items[0].quantity).to.equal(2);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(6120);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - checkout new order default method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecf814e4-aad0-4e95-9a7c-7e0f6ff4f53b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"amount\": 6120,\n\t\"method\": {\n\t\t\"type\" : \"PaymentMethod\"\n\t}\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart/checkout",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart",
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - cart should be empty default method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48bb30ba-f012-42c1-80c6-222f316c08b7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"should have no items\", function(){",
									"    pm.expect(json.items).to.be.undefined;",
									"   ",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - get tickets for event default method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6231a347-7d0d-4e52-9df5-3e0dd47eb022",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    let length = json.data.length;",
									"    pm.expect(length).to.equal(7);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/tickets",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"tickets"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "My orders",
			"item": [
				{
					"name": "User - Current Me",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3677e01-0ed8-4cd2-9673-0e6dacae9a53",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_user_id\", json.user.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/users/me",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - My Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f69f3a0-d8e6-439d-a830-1ed7453baa77",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.data[0].items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.data[0].items[0].unit_price_in_cents).to.equal(3000);",
									"});",
									"",
									"",
									"pm.environment.set(\"last_order_id\", json.data[0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/orders",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Order Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a10ac6c-523b-43ac-b5d4-5bea60b5618b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/orders/{{last_order_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"orders",
								"{{last_order_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transfer Tickets",
			"item": [
				{
					"name": "Via QR",
					"item": [
						{
							"name": "Ticket - Index",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78dae9d8-c586-4bec-876e-ac1d7a55dbc9",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"ticket1_id\", json.data[0][1][0].id);",
											"pm.environment.set(\"ticket2_id\", json.data[0][1][1].id);",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/tickets?query=",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"tickets"
									],
									"query": [
										{
											"key": "query",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Tickets - Authorize Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa09a71a-5451-49e9-a771-bf1949cc318e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"transfer_transfer_key\", json.transfer_key);",
											"pm.environment.set(\"transfer_sender_user_id\", json.sender_user_id);",
											"pm.environment.set(\"transfer_num_tickets\", json.num_tickets);",
											"pm.environment.set(\"transfer_signature\", json.signature);"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ticket_ids\":[\n\t\t\"{{ticket1_id}}\",\n\t\t\"{{ticket2_id}}\"],\n\t\t\"validity_period_in_seconds\":3600\n}"
								},
								"url": {
									"raw": "http://{{server}}/tickets/transfer",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"tickets",
										"transfer"
									]
								}
							},
							"response": []
						},
						{
							"name": "User2 - register",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"should be 201\", function() {",
											"    pm.response.to.have.status(201);",
											"})",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7fd9d58-97c7-497f-a26c-6425e4d346b0",
										"type": "text/javascript",
										"exec": [
											"",
											"pm.environment.set(\"last_email2\", \"john\" + (new Date()).getTime() + \"@tari.com\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"first_name\":\"John\",\n\t\"last_name\":\"Surname\",\n\t\"email\":\"{{last_email2}}\",\n\t\"phone\":\"555\",\n\t\"password\": \"itsasecret\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/users/register",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"users",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "User2 - login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c88075b1-daa2-4141-a9fe-44fe68f4e7a8",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"user2_token\", json.access_token);",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\":\"{{last_email2}}\", \"password\":\"itsasecret\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/auth/token",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"auth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tickets - Receive Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b8fa947-f6d6-440b-8377-5bd2a5aab067",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user2_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transfer_key\": \"{{transfer_transfer_key}}\",\n    \"sender_user_id\": \"{{transfer_sender_user_id}}\",\n    \"num_tickets\": {{transfer_num_tickets}},\n    \"signature\": \"{{transfer_signature}}\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/tickets/receive",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"tickets",
										"receive"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tickets - Index - Should not include sent tickets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e788041-0bf2-46b8-98b1-79447957b3f3",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.test(\"should not include sent tickets\", function() {",
											"    var ticket1 = pm.environment.get(\"ticket1_id\");",
											"    var ticket2 = pm.environment.get(\"ticket2_id\");",
											"    for(var i =0;i<json.data[0][1].length;i++) {",
											"        if (json.data[0][1][i].id === ticket1 || json.data[0][1][i].id === ticket2) {",
											"            assert.fail(\"User still has ticket that was transferred\");",
											"        }",
											"    }",
											"   ",
											"})"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/tickets?query=",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"tickets"
									],
									"query": [
										{
											"key": "query",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Via Email/SMS",
					"item": [
						{
							"name": "Ticket - Index",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78dae9d8-c586-4bec-876e-ac1d7a55dbc9",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"let json = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"ticket1_id\", json.data[0][1][0].id);",
											"pm.environment.set(\"ticket2_id\", json.data[0][1][1].id);",
											"pm.environment.set(\"ticket3_id\", json.data[0][1][2].id);",
											"pm.environment.set(\"ticket4_id\", json.data[0][1][3].id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{server}}/tickets?query=",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"tickets"
									],
									"query": [
										{
											"key": "query",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Tickets - Authorize Transfer - Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a2ed9bb-ca51-4f0f-bfc5-ba78924b1833",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ticket_ids\":[\n\t\t\"{{ticket1_id}}\",\n\t\t\"{{ticket2_id}}\"],\n\t\"email_or_phone\": \"test@test.com\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/tickets/send",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"tickets",
										"send"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tickets - Authorize Transfer - SMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a2ed9bb-ca51-4f0f-bfc5-ba78924b1833",
										"exec": [
											"pm.test(\"should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ticket_ids\":[\n\t\t\"{{ticket3_id}}\",\n\t\t\"{{ticket4_id}}\"],\n\t\"email_or_phone\": \"27725084284\"\n}"
								},
								"url": {
									"raw": "http://{{server}}/tickets/send",
									"protocol": "http",
									"host": [
										"{{server}}"
									],
									"path": [
										"tickets",
										"send"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Redeeming",
			"item": [
				{
					"name": "Admin - Get Guest List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d45f9b99-03d0-43cc-9394-ec61d6f955b3",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"7 guests should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(7);",
									"    pm.environment.set(\"last_ticket_instance_id\", json.data[0].id);",
									"    pm.environment.set(\"last_ticket_instance_redeem_key\", json.data[0].redeem_key);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/guests?query=",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"guests"
							],
							"query": [
								{
									"key": "query",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Checkin Event List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d45f9b99-03d0-43cc-9394-ec61d6f955b3",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"There should be 1 event that Admin can checkin\", function() {",
									"    pm.expect(json.data.length).to.equal(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/checkins",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"checkins"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Redeem Ticket",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d45f9b99-03d0-43cc-9394-ec61d6f955b3",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"pm.test(\"ID should be last_ticket_instance_id\", function() {",
									"    pm.expect(json.id).to.equal(pm.environment.get(\"last_ticket_instance_id\"));",
									"});",
									"pm.test(\"Data should be an object and not have an error key\", function() {",
									"    pm.expect(json).to.be.an('object');",
									"    pm.expect(json.hasOwnProperty(\"error\")).to.equal(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"redeem_key\": \"{{last_ticket_instance_redeem_key}}\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/redeem/{{last_ticket_instance_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"redeem",
								"{{last_ticket_instance_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Redeem Duplicate Ticket Should Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d45f9b99-03d0-43cc-9394-ec61d6f955b3",
								"exec": [
									"pm.test(\"should be 409\", function() {",
									"    pm.response.to.have.status(409);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"pm.test(\"Response should include error key\", function() {",
									"    pm.expect(json).to.be.an(\"object\");",
									"    pm.expect(json.error).to.be.an(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"redeem_key\": \"{{last_ticket_instance_redeem_key}}\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/redeem/{{last_ticket_instance_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"redeem",
								"{{last_ticket_instance_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Box Office",
			"item": [
				{
					"name": "Box Office - Create Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_box_office_order_id\", json.id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(2);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"    ",
									"    ",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"     pm.expect(json.items[1].quantity).to.equal(2);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(6120);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\":2\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Box Office - Update order note",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Note should be updated\", function() {",
									"    pm.expect(json.note).to.equal(\"Client to collect after 5pm\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n\t\"note\" : \"Client to collect after 5pm\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/orders/{{last_box_office_order_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"orders",
								"{{last_box_office_order_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Box Office - Do External Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecf814e4-aad0-4e95-9a7c-7e0f6ff4f53b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"should be paid\", function() {",
									"    pm.expect(json.status).to.equal(\"Paid\");",
									"    pm.environment.set(\"last_box_office_user_id\", json.user_id);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"amount\": 12140,\n\t\"method\": {\n\t\t\"type\" : \"External\",\n\t\t\"reference\": \"INV{{$timestamp}}\",\n\t\t\"first_name\" : \"Name{{$timestamp}}\",\n\t\t\"last_name\" : \"LastName{{$timestamp}}\",\n\t\t\"email\" : \"email{{$timestamp}}@test.com\",\n\t\t\"note\" : \"Tada\"\n\t}\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart/checkout",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart",
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Box Office - Show tickets for order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f69f3a0-d8e6-439d-a830-1ed7453baa77",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.length).to.equal(2);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/orders/{{last_box_office_order_id}}/tickets",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"orders",
								"{{last_box_office_order_id}}",
								"tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Box Office - Create Order (Existing User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_box_office_order_id\", json.id);",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.items[0].quantity).to.equal(2);",
									"    pm.expect(json.items[0].unit_price_in_cents).to.equal(3000);",
									"    ",
									"    ",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[1].item_type).to.equal(\"PerUnitFees\");",
									"     pm.expect(json.items[1].quantity).to.equal(2);",
									"    pm.expect(json.items[1].unit_price_in_cents).to.equal(10);",
									"});",
									"",
									"pm.test(\"fees should be present\", function(){",
									"    pm.expect(json.items[2].item_type).to.equal(\"EventFees\");",
									"    ",
									"    pm.expect(json.items[2].unit_price_in_cents).to.equal(100);",
									"});",
									"",
									"pm.test(\"total should be correct\", function() {",
									"    pm.expect(json.total_in_cents).to.equal(6120);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{last_ticket_type_id}}\",\n\"quantity\":2\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Box Office - Do External Payment (Existing User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecf814e4-aad0-4e95-9a7c-7e0f6ff4f53b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"should be paid\", function() {",
									"    pm.expect(json.status).to.equal(\"Paid\");",
									"    pm.environment.set(\"last_box_office_user_id\", json.user_id);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"amount\": 12140,\n\t\"method\": {\n\t\t\"type\" : \"External\",\n\t\t\"reference\": \"INV{{$timestamp}}\",\n\t\t\"first_name\" : \"Name{{$timestamp}}\",\n\t\t\"last_name\" : \"LastName{{$timestamp}}\",\n\t\t\"email\" : \"{{last_email}}\",\n\t\t\"note\" : \"Tada\"\n\t}\n}"
						},
						"url": {
							"raw": "http://{{server}}/cart/checkout",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart",
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - My Orders (For On Behalf Of)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f69f3a0-d8e6-439d-a830-1ed7453baa77",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"tickets should be present\", function(){",
									"    pm.expect(json.data[0].items[0].item_type).to.equal(\"Tickets\");",
									"    pm.expect(json.data[0].items[0].unit_price_in_cents).to.equal(3000);",
									"});",
									"",
									"",
									"pm.test(\"box office order should be present\", function(){",
									"    let found = false;",
									"    for(let i=0;i<json.data.length;i++) {",
									"        if (json.data[i].id===pm.environment.get(\"last_box_office_order_id\")) {",
									"            found = true;",
									"        }",
									"    }",
									"    ",
									"    pm.expect(found).to.be.true;",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/orders",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Box Office - Create Order over limit for single order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 422\", function() {",
									"    pm.response.to.have.status(422);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{ga_ticket_type_id}}\",\n\"quantity\":51\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Box Office - Create Order that would be over limit due to previous orders if  not for on behalf of other user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aadca825-5dbc-4d09-8fb8-6b9d7cbe9350",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"items\": [{\n\"ticket_type_id\": \"{{ga_ticket_type_id}}\",\n\"quantity\":49\n}]}"
						},
						"url": {
							"raw": "http://{{server}}/cart",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Dashboards",
			"item": [
				{
					"name": "Admin - View Event Dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d481afe5-174e-4720-914d-483d6b75535e",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/events/{{last_event_id}}/dashboard",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"events",
								"{{last_event_id}}",
								"dashboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - View Fans Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d481afe5-174e-4720-914d-483d6b75535e",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"fans should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(2);",
									"});",
									"",
									"pm.test(\"last user fan data should be present\", function(){",
									"    let user_id = pm.environment.get(\"last_user_id\");",
									"    pm.expect([json.data[0].user_id, json.data[1].user_id]).to.include(user_id);",
									"    pm.expect([json.data[0].first_name, json.data[1].first_name]).to.include(\"Mike\");",
									"    pm.expect([json.data[0].last_name, json.data[1].last_name]).to.include(\"Surname\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/organizations/{{last_org_id}}/fans?page=0&limit=10&sort=Email&dir=Asc",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"organizations",
								"{{last_org_id}}",
								"fans"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "sort",
									"value": "Email"
								},
								{
									"key": "dir",
									"value": "Asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - View Fan Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d481afe5-174e-4720-914d-483d6b75535e",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"user should be present\", function(){",
									"    pm.expect(json.first_name).to.equal(\"Mike\");",
									"    pm.expect(json.last_name).to.equal(\"Surname\");",
									"    pm.expect(json.facebook_linked).to.equal(false);",
									"    pm.expect(json.event_count).to.equal(1);",
									"    pm.expect(json.revenue_in_cents).to.equal(21470);",
									"    pm.expect(json.ticket_sales).to.equal(7);",
									"    pm.expect(json.thumb_profile_pic_url).to.equal(null);",
									"    pm.expect(json.cover_photo_url).to.equal(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/organizations/{{last_org_id}}/fans/{{last_user_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"organizations",
								"{{last_org_id}}",
								"fans",
								"{{last_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - View Fan Page History",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d481afe5-174e-4720-914d-483d6b75535e",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"orders should be present\", function(){",
									"    pm.expect(json.data.length).to.equal(4);",
									"});",
									"",
									"pm.test(\"orders should have correct information\", function(){",
									"    pm.expect(json.data[0].revenue_in_cents).to.equal(6120);",
									"    pm.expect(json.data[0].event_name).to.equal(\"It's my party\");",
									"    pm.expect(json.data[0].ticket_sales).to.equal(2);",
									"    pm.expect(json.data[0].type).to.equal(\"Purchase\");",
									"    ",
									"    pm.expect(json.data[1].revenue_in_cents).to.equal(6120);",
									"    pm.expect(json.data[1].event_name).to.equal(\"It's my party\");",
									"    pm.expect(json.data[1].ticket_sales).to.equal(2);",
									"    pm.expect(json.data[1].type).to.equal(\"Purchase\");",
									"    ",
									"    pm.expect(json.data[2].revenue_in_cents).to.equal(6120);",
									"    pm.expect(json.data[2].event_name).to.equal(\"It's my party\");",
									"    pm.expect(json.data[2].ticket_sales).to.equal(2);",
									"    pm.expect(json.data[2].type).to.equal(\"Purchase\");",
									"    ",
									"    pm.expect(json.data[3].revenue_in_cents).to.equal(3110);",
									"    pm.expect(json.data[3].event_name).to.equal(\"It's my party\");",
									"    pm.expect(json.data[3].ticket_sales).to.equal(1);",
									"    pm.expect(json.data[3].type).to.equal(\"Purchase\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/organizations/{{last_org_id}}/fans/{{last_user_id}}/history",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"organizations",
								"{{last_org_id}}",
								"fans",
								"{{last_user_id}}",
								"history"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Accounts",
			"item": [
				{
					"name": "User - forgot password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e16f515-b7c5-4312-b241-2d72c62323f0",
								"exec": [
									"pm.test(\"should be 201\", function() {",
									"    pm.response.to.have.status(201);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c70409f-473d-4a08-94e7-b32f606b85a7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\t\"email\":\"{{last_email}}\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/password_reset",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"password_reset"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Push Notifications",
			"item": [
				{
					"name": "User - login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3677e01-0ed8-4cd2-9673-0e6dacae9a53",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"user_token\", json.access_token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"{{last_email}}\", \"password\":\"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/auth/token",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Current Me",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3677e01-0ed8-4cd2-9673-0e6dacae9a53",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"last_user_id\", json.user.id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"{{last_email}}\", \"password\":\"itsasecret\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/users/me",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Add Push Notification Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e712cc16-4004-4316-9ea5-1ea5608d4c1a",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"token_source\": \"example_token_source\",\n    \"token\": \"example_token\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/users/tokens",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Add 1 more Push Notification Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e712cc16-4004-4316-9ea5-1ea5608d4c1a",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"token_source\": \"example_token_source\",\n    \"token\": \"example_token\"\n}"
						},
						"url": {
							"raw": "http://{{server}}/users/tokens",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Show Push Notification Tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c0a835f-c1ec-4316-ba26-232f97e66de0",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"push notification tokens should be present\", function(){",
									"    pm.expect(json.length).to.equal(2);",
									"    pm.expect(json[0].token_source).to.equal(\"example_token_source\");",
									"    pm.expect(json[0].token_source).to.equal(\"example_token_source\");",
									"    pm.expect(json[0].token).to.equal(\"example_token\");",
									"});",
									"",
									"pm.environment.set(\"last_push_notification_token_id\", json[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/users/tokens",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Remove Push Notification Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "007abc26-ee03-417b-a697-76e9fbd9f775",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/users/tokens/{{last_push_notification_token_id}}",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users",
								"tokens",
								"{{last_push_notification_token_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Show Specific Users Push Notification Tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a43b32d-797c-4fb5-8830-0623c9283d9b",
								"exec": [
									"pm.test(\"should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test(\"one push notification token should be removed\", function(){",
									"    pm.expect(json.length).to.equal(1);",
									"    pm.expect(json[0].token_source).to.equal(\"example_token_source\");",
									"    pm.expect(json[0].token_source).to.equal(\"example_token_source\");",
									"    pm.expect(json[0].token).to.equal(\"example_token\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{server}}/users/{{last_user_id}}/tokens",
							"protocol": "http",
							"host": [
								"{{server}}"
							],
							"path": [
								"users",
								"{{last_user_id}}",
								"tokens"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
